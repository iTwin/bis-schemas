trigger:
  branches:
    include:
     - master
  paths:
    include:
     - Domains/
     - Standard/

pr:
  drafts: false
  branches:
    include:
     - master
  # paths:
  #   include:
  #    - Domains/
  #    - Standard/
  #    - tools/MarkdownGeneration/

jobs:
- job: Generate_Docs
  displayName: Generate Docs
  workspace:
    clean: all

  pool:
    vmImage: windows-latest

  steps:
  - script: npm install @bentley/ecjson2md@latest
    displayName: Install ECJson2md
    workingDirectory: $(Build.BinariesDirectory)

  - task: CopyFiles@2
    displayName: 'Copy all schemas to staging directory'
    inputs:
      SourceFolder: '$(System.DefaultWorkingDirectory)'
      Contents: '**/*.ecschema.xml'
      TargetFolder: '$(Build.StagingDirectory)\xml\'

  - task: PythonScript@0
    displayName: Run Schema Json Serializer
    inputs:
      scriptSource: inline
      script: |
        import os, sys, shutil, subprocess
        #from sets import Set

        defaultWorkingDir = os.path.realpath(sys.argv[1])

        schemasToSkip = ["ECDbFileInfo", "ECDbSystem", "ECv3ConversionAttributes", "PresentationRules", "SchemaLocalizationCustomAttributes"]
        # folders that contain a schema but aren't a released folder as reference directories.
        refDir = set()
        # all released schemas found by looking in 'Released' directories and pulling the highest schema version
        releasedSchemas = {}
        # files found in 'media' directories that do not end with .cmap
        schemaMediaFiles = set()
        for root, dirs, files in os.walk(defaultWorkingDir):
                files.sort(reverse=True)
                for fileName in files:
                        # reference schema directories
                        if "Released" not in root and fileName.endswith(".ecschema.xml"):
                                refDir.add(root)
                                print ("Added directory " + root + " as a reference path.")
                        # Relesed schema Files
                        if "Released" in root and fileName.endswith(".ecschema.xml"):
                                schemaName = fileName[:fileName.index(".")]
                                if schemaName not in releasedSchemas and schemaName not in schemasToSkip:
                                        releasedSchemas[schemaName] = os.path.join(root, fileName)
                                        print ("Added released schema " + fileName + " from directory " + root)
                        # media files
                        if "media" in root and "docs" not in root and not fileName.endswith(".cmap"):
                                schemaMediaFiles.add(os.path.join(root, fileName))
                                print ("Added media for schema " + fileName + " from directory " + root)

        # add the released versions of the ECDb schemas because the real versions are not copied over
        refDir.add(os.path.join(defaultWorkingDir, "Standard", "ECDb", "Released"))
        rDir = ' '.join(refDir)

        outputDir = os.path.join(os.path.realpath(sys.argv[2]), "json")
        if not os.path.exists(outputDir):
                os.makedirs(outputDir)
        print ("Using the output directory, '" + outputDir + "'.")

        mdOutputDir = os.path.join(os.path.realpath(sys.argv[2]), "markdown")
        if not os.path.exists(mdOutputDir):
                os.makedirs(mdOutputDir)

        for schemaName, fullXmlSchemaPath in releasedSchemas.items():
                # Copy all markdown files that also have a schema.
                fullMdSchemaPath = os.path.join(fullXmlSchemaPath[:fullXmlSchemaPath.find("Released")], schemaName) + ".remarks.md"
                if os.path.exists(fullMdSchemaPath):
                        print ("Copying schema markdown file " + fullMdSchemaPath)
                        shutil.copy(fullMdSchemaPath, mdOutputDir)

        mdMediaOutputDir = os.path.join(mdOutputDir, "media")
        for mediaFile in schemaMediaFiles:
                targetFilePath = os.path.join(mdMediaOutputDir, mediaFile.split('media\\')[-1])
                if not os.path.exists(os.path.dirname(targetFilePath)):
                        os.makedirs(os.path.dirname(targetFilePath))
                if os.path.exists(targetFilePath):
                        print ("ERROR - Cannot copy " + mediaFile + " because a file with the same name already exists in the media output directory.")
                        exit(-1)
                print ("Copying media file " + mediaFile)
                shutil.copy(mediaFile, targetFilePath)

      arguments: '$(System.DefaultWorkingDirectory) $(Build.StagingDirectory)'

  - task: Npm@1
    displayName: 'npm install'
    inputs:
      workingDir: '$(Build.Repository.LocalPath)'
      verbose: false

  - task: Npm@1
    displayName: 'Generate Json Schemas'
    inputs:
      command: custom
      workingDir: '$(Build.Repository.LocalPath)'
      verbose: false
      customCommand: 'run generateJsonSchemas -- --latestReleasedVersionsForMarkdown --OutDir $(Build.StagingDirectory)/json/'

  - script: |
      mkdir $(Build.StagingDirectory)\markdown\
      
      cmd | for %%a in ($(Build.StagingDirectory)\json\*.json) do (
        $(Build.BinariesDirectory)/node_modules/.bin/ecjson2md -i %%a -r $(Build.StagingDirectory)\json\ -o $(Build.StagingDirectory)\markdown\
      )
    displayName: 'Generate Markdown'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: Bis Docs'
    inputs:
      PathtoPublish: '$(Build.StagingDirectory)\markdown\'
      ArtifactName: 'Bis Docs'
