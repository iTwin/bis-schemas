workspace:
  clean: all

trigger:
  branches:
    include:
     - master
  paths:
    include:
     - '*.ecschema.xml'
     - '*.remarks.md'

pool:
  name: iModelTechCI
  demands:
  - Agent.OS -equals Windows_NT
  - npm

variables:
  ECObjectsToolsPath: '$(Build.BinariesDirectory)\ECObjectsToolsNuGet_x64'

steps:
- task: NuGetCommand@2
  displayName: Install ECObjects Tools
  inputs:
    command: custom
    arguments: install ECObjectsToolsNuGet_x64 -ExcludeVersion -Source https://npm.bentley.com/nuget/Default/ -OutputDirectory $(Build.BinariesDirectory)

- script: npm install @bentley/ecjson2md@latest
  displayName: Install ECJson2md
  workingDirectory: $(Build.BinariesDirectory)

- task: CopyFiles@2
  displayName: 'Copy all schemas to staging directory'
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)'
    Contents: '**/*.ecschema.xml'
    TargetFolder: '$(Build.StagingDirectory)\xml\'

- task: PythonScript@0
  displayName: Run Schema Json Serializer
  inputs:
    scriptSource: inline
    script: |
     import os, sys, shutil, subprocess
     from sets import Set

     defaultWorkingDir = os.path.realpath(sys.argv[1])

     # Add folders that contain a schema but aren't a released folder.
     refDir = Set()
     for root, dirs, files in os.walk(defaultWorkingDir):
       for fileName in files:
         if "Released" not in root and fileName.endswith(".ecschema.xml"):
           refDir.add(root)
           print "Added directory " + root + " as a reference path."

     # add the released versions of the ECDb schemas because the real versions are not copied over
     refDir.add(os.path.join(defaultWorkingDir, "Standard", "ECDb", "Released"))
     rDir = ' '.join(refDir)

     schemaPaths = [
        "Domains\BuildingSpatial\BuildingSpatial",
        "Domains\ClassificationSystems\ClassificationSystems",
        "Domains\Core\Analytical",
        "Domains\Core\BisCore",
        "Domains\Core\Functional",
        "Domains\Core\Generic",
        "Domains\Core\LinearReferencing",
        "Domains\Core\PhysicalMaterial",
        "Domains\Grids\Grids",
        "Domains\SpatialComposition\SpatialComposition",
        "Standard\CoreCustomAttributes",
        "Standard\Formats",
        "Standard\Units"
     ]

     schemaSerializer = os.path.realpath(sys.argv[2])
     print "Using the schema json serializer, '" + schemaSerializer + "'."

     outputDir = os.path.join(os.path.realpath(sys.argv[3]), "json")
     print "Using the output directory, '" + outputDir + "'."

     args = [
       schemaSerializer,
       "-a",  # Serializes all of the schemas in the Schema Graph
       "-u",  # Inclues the standard schemas in the conversion
       "-r", rDir,  # The reference directories to use to find other schemas
       "-o", outputDir,  # The output directory to place the ECJson schemas
       "-i", # The input file to be serialized to ECJson
     ]

     mdOutputDir = os.path.join(os.path.realpath(sys.argv[3]), "markdown")
     if not os.path.exists(mdOutputDir):
      os.makedirs(mdOutputDir)

     for schemaPath in schemaPaths:
       fullXmlSchemaPath = os.path.join(defaultWorkingDir, schemaPath) + ".ecschema.xml"

       args.append(fullXmlSchemaPath)

       print "Serializing the schema path '" + fullXmlSchemaPath+ "'."

       proc = subprocess.Popen(' '.join(args), stdin = subprocess.PIPE, stdout = subprocess.PIPE, shell=True)

       if proc.returncode is not None and proc.returncode != 0:
         print "The serialization left a non-zero exit code: " + str(proc.returncode)
         exit(proc.returncode)

       print "Finished serializing the schema path '" + fullXmlSchemaPath + "'."

       args.pop()

       # Copy all markdown files that also have a schema.
       fullMdSchemaPath = os.path.join(defaultWorkingDir, schemaPath) + ".remarks.md"
       if os.path.exists(fullMdSchemaPath):
         shutil.copy(fullMdSchemaPath, mdOutputDir)
    arguments: '$(System.DefaultWorkingDirectory) $(ECObjectsToolsPath)\lib\native\SchemaJsonSerializer $(Build.StagingDirectory)'

- script: |
   mkdir $(Build.StagingDirectory)\markdown\
   
   cmd | for %%a in ($(Build.StagingDirectory)\json\*.json) do (
     $(Build.BinariesDirectory)/node_modules/.bin/ecjson2md -i %%a -r $(Build.StagingDirectory)\json\ -o $(Build.StagingDirectory)\markdown\
   )
  displayName: 'Generate Markdown'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: Bis Docs'
  inputs:
    PathtoPublish: '$(Build.StagingDirectory)\markdown\'
    ArtifactName: 'Bis Docs'
