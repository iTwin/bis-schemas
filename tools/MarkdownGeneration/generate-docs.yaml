trigger:
  branches:
    include:
     - master
  paths:
    include:
     - Domains/
     - Standard/

pr:
  drafts: false
  branches:
    include:
     - master
  paths:
    include:
     - Domains/
     - Standard/
     - tools/MarkdownGeneration/

resources:
  repositories:
    - repository: imodeljs
      type: github
      ref: 'refs/heads/build-to-yaml'
      endpoint: iModelJs
      name: imodeljs/imodeljs

jobs:
- job: Generate_Docs
  displayName: Generate Docs
  workspace:
    clean: all

  pool:
    name: 
    demands:
    - Agent.OS -equals Windows_NT
    - npm

  variables:
  - group: 

    value: '$(Build.BinariesDirectory)\'

  steps:
  - task: NuGetCommand@2
    displayName: Install ECObjects Tools
    inputs:
      command: custom
      arguments: install  -ExcludeVersion -Source _packaging/Packages/nuget/v3/index.json -OutputDirectory $(Build.BinariesDirectory)

  
  - powershell: |
      $npmrcDir = "$(Build.Repository.LocalPath)"
      
      if(!(Test-Path -Path $npmrcDir)){
          mkdir $npmrcDir
      }
      
      $npmrcFile = $npmrcDir + "/.npmrc"
      
      Out-File -FilePath $npmrcFile -Encoding ascii -InputObject "@bentley:registry=/"
      
      Out-File -FilePath $npmrcFile -Encoding ascii -InputObject "////_packaging/Packages/npm/registry/:username=Packages" -Append
      Out-File -FilePath $npmrcFile -Encoding ascii -InputObject "////_packaging/Packages/npm/registry/:_password=$()" -Append
      Out-File -FilePath $npmrcFile -Encoding ascii -InputObject "////_packaging/Packages/npm/registry/:email=npm requires email to be set but doesn't use the value" -Append
      Out-File -FilePath $npmrcFile -Encoding ascii -InputObject "////_packaging/Packages/npm/:username=Packages" -Append
      Out-File -FilePath $npmrcFile -Encoding ascii -InputObject "////_packaging/Packages/npm/:_password=$()" -Append
      Out-File -FilePath $npmrcFile -Encoding ascii -InputObject "////_packaging/Packages/npm/:email=npm requires email to be set but doesn't use the value" -Append

  - script: npm install @bentley/ecjson2md@latest
    displayName: Install ECJson2md
    workingDirectory: $(Build.BinariesDirectory)

  - task: CopyFiles@2
    displayName: 'Copy all schemas to staging directory'
    inputs:
      SourceFolder: '$(System.DefaultWorkingDirectory)'
      Contents: '**/*.ecschema.xml'
      TargetFolder: '$(Build.StagingDirectory)\xml\'

  - task: PythonScript@0
    displayName: Run Schema Json Serializer
    inputs:
      scriptSource: inline
      script: |
        import os, sys, shutil, subprocess
        from sets import Set

        defaultWorkingDir = os.path.realpath(sys.argv[1])

        schemasToSkip = ["ECDbFileInfo", "ECDbSystem", "ECv3ConversionAttributes", "PresentationRules", "SchemaLocalizationCustomAttributes"]
        # folders that contain a schema but aren't a released folder as reference directories.
        refDir = Set()
        # all released schemas found by looking in 'Released' directories and pulling the highest schema version
        releasedSchemas = {}
        # files found in 'media' directories that do not end with .cmap
        schemaMediaFiles = Set()
        for root, dirs, files in os.walk(defaultWorkingDir):
          files.sort(reverse=True)
          for fileName in files:
            # reference schema directories
            if "Released" not in root and fileName.endswith(".ecschema.xml"):
              refDir.add(root)
              print "Added directory " + root + " as a reference path."
            # Relesed schema Files
            if "Released" in root and fileName.endswith(".ecschema.xml"):
              schemaName = fileName[:fileName.index(".")]
              if schemaName not in releasedSchemas and schemaName not in schemasToSkip:
                releasedSchemas[schemaName] = os.path.join(root, fileName)
                print "Added released schema " + fileName + " from directory " + root
            # media files
            if "media" in root and "docs" not in root and not fileName.endswith(".cmap"):
              schemaMediaFiles.add(os.path.join(root, fileName))
              print "Added media for schema " + fileName + " from directory " + root

        # add the released versions of the ECDb schemas because the real versions are not copied over
        refDir.add(os.path.join(defaultWorkingDir, "Standard", "ECDb", "Released"))
        rDir = ' '.join(refDir)

        schemaSerializer = os.path.realpath(sys.argv[2])
        print "Using the schema json serializer, '" + schemaSerializer + "'."

        outputDir = os.path.join(os.path.realpath(sys.argv[3]), "json")
        print "Using the output directory, '" + outputDir + "'."

        args = [






        ]


        if not os.path.exists(mdOutputDir):
          os.makedirs(mdOutputDir)
        













          args.pop()

          # Copy all markdown files that also have a schema.
          fullMdSchemaPath = os.path.join(fullXmlSchemaPath[:fullXmlSchemaPath.find("Released")], schemaName) + ".remarks.md"
          if os.path.exists(fullMdSchemaPath):
            print "Copying schema markdown file " + fullMdSchemaPath
            shutil.copy(fullMdSchemaPath, mdOutputDir)

        mdMediaOutputDir = os.path.join(mdOutputDir, "media")
        for mediaFile in schemaMediaFiles:
          targetFilePath = os.path.join(mdMediaOutputDir, mediaFile.split('media\\')[-1])
          if not os.path.exists(os.path.dirname(targetFilePath)):
            os.makedirs(os.path.dirname(targetFilePath))
          if os.path.exists(targetFilePath):
            print "ERROR - Cannot copy " + mediaFile + " because a file with the same name already exists in the media output directory."
            exit(-1)
          print "Copying media file " + mediaFile
          shutil.copy(mediaFile, targetFilePath)

      arguments: '$(System.DefaultWorkingDirectory)  $(Build.StagingDirectory)'

  - script: |
      mkdir $(Build.StagingDirectory)\markdown\
      
      cmd | for %%a in ($(Build.StagingDirectory)\json\*.json) do (
        $(Build.BinariesDirectory)/node_modules/.bin/ecjson2md -i %%a -r $(Build.StagingDirectory)\json\ -o $(Build.StagingDirectory)\markdown\
      )
    displayName: 'Generate Markdown'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: Bis Docs'
    inputs:
      PathtoPublish: '$(Build.StagingDirectory)\markdown\'
      ArtifactName: 'Bis Docs'

- job: Validate_Docs
  displayName: Validate Docs
  dependsOn: Generate_Docs
  condition: and(succeeded(), in(variables['Build.Reason'], 'PullRequest', 'Manual'))
  workspace:
    clean: all
  pool:
    name: 
    demands: Agent.OS -equals Windows_NT

  steps:
    - checkout: imodeljs
      clean: true
    - task: NodeTool@0
      displayName: Use Node 12.17.0
      inputs:
        versionSpec: 12.17.0
        checkLatest: true
    - script: |
        git config --local user.email $(user_email)
        git config --local user.name $(username)
      displayName: Setup git config
    - template: common/config/azure-pipelines/templates/docs-build.yaml@imodeljs
      parameters:
        downloadCurrentBuildArtifacts: 'true'
